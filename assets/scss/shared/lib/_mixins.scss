@import "breakpoints";

@mixin srt {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	overflow: hidden;
	clip: rect( 1px, 1px, 1px, 1px );
	border: 0;
	clip-path: inset( 50% );
	word-wrap: normal !important;
}

/// Horizontally or vertically aligns the items within a flex container.
/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`.
///                              Or, set it to `null` (the default) to not set horizontal alignment.
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`.
///                              Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align( $x: null, $y: null, $text-direction: ltr ) {
	$flex-align: (
		"top": flex-start,
		"bottom": flex-end,
		"middle": center,
		"stretch": stretch,
	) !default;
	$flex-justify: (
		"left": if( $text-direction == rtl, flex-end, flex-start ),
		"right": if( $text-direction == rtl, flex-start, flex-end ),
		"center": center,
		"justify": space-between,
		"spaced": space-around,
	) !default;

	@if $x {
		@if map-has-key( $flex-justify, $x ) {
			$x: map-get( $flex-justify, $x );
		} @else {
			@warn "flex-grid-row-align(): #{ $x } is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced."; // stylelint-disable-line max-line-length
		}
	}

	@if $y {
		@if map-has-key( $flex-align, $y ) {
			$y: map-get( $flex-align, $y );
		} @else {
			@warn "flex-grid-row-align(): #{ $y } is not a valid value for vertical alignment. Use top, bottom, middle, or stretch."; // stylelint-disable-line max-line-length
		}
	}
	justify-content: $x;
	align-items: $y;
}

@mixin text-inputs( $types: (), $modifier: "" ) {
	#{ text-inputs( $types, $modifier ) } {
		@content;
	}
}


/// Typography
@mixin apply-header-style( $style-map: () ) {
	@each $prop, $val in $style-map {
		$value: if( $prop == font-size, rem( $val ), $val );
		#{ unquote( $prop ) }: #{ if( is-number( $value ), $value, unquote( $value ) ) };
	}
}

@mixin style-header( $lvl: h1 ) {
	@each $size, $headings in $heading-styles {
		$style-map: map-get( $headings, $lvl );
		@if $size == small {
			& {
				@include apply-header-style( $style-map );
			}
		} @else if map-has-key( $breakpoints, $size ) {
			@include breakpoint( $size ) {
				& {
					@include apply-header-style( $style-map );
				}
			}
		}
	}
}

@mixin style-headers {
	$all-headings: h1, h2, h3, h4, h5, h6;
	@each $lvl in $all-headings {
		#{ $lvl } {
			@include style-header( $lvl );
		}
	}
}

@mixin font-giant {
	font-size: rem( 60 );
}

@mixin font-h1 {
	@include style-header( h1 );
}

@mixin font-h2 {
	@include style-header( h2 );
}

@mixin font-h3 {
	@include style-header( h3 );
}

@mixin font-h4 {
	@include style-header( h4 );
}

@mixin font-h5 {
	@include style-header( h5 );
}

@mixin font-h6 {
	@include style-header( h6 );
}

@mixin font-std {
	font-size: rem( 16 );
}

@mixin font-sm {
	font-size: rem( 14 );
}

@mixin font-tiny {
	font-size: rem( 12 );
}

@mixin font-smoothing {
	-webkit-font-smoothing: antialiased;
	-moz-font-smoothing: grayscale;
}
