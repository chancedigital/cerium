@import "breakpoints";

@mixin srt {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	overflow: hidden;
	clip: rect( 1px, 1px, 1px, 1px );
	border: 0;
	clip-path: inset( 50% );
	word-wrap: normal !important;
}

/// Horizontally or vertically aligns the items within a flex container.
/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`.
///                              Or, set it to `null` (the default) to not set horizontal alignment.
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`.
///                              Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align( $x: null, $y: null, $text-direction: ltr ) {
	$flex-align: (
		"top": flex-start,
		"bottom": flex-end,
		"middle": center,
		"stretch": stretch,
	) !default;
	$flex-justify: (
		"left": if( $text-direction == rtl, flex-end, flex-start ),
		"right": if( $text-direction == rtl, flex-start, flex-end ),
		"center": center,
		"justify": space-between,
		"spaced": space-around,
	) !default;

	@if $x {
		@if map-has-key( $flex-justify, $x ) {
			$x: map-get( $flex-justify, $x );
		} @else {
			@warn "flex-grid-row-align(): #{ $x } is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced."; // stylelint-disable-line max-line-length
		}
	}

	@if $y {
		@if map-has-key( $flex-align, $y ) {
			$y: map-get( $flex-align, $y );
		} @else {
			@warn "flex-grid-row-align(): #{ $y } is not a valid value for vertical alignment. Use top, bottom, middle, or stretch."; // stylelint-disable-line max-line-length
		}
	}
	justify-content: $x;
	align-items: $y;
}
