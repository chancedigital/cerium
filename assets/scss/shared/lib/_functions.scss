/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit( $number ) {
	@if type-of( $number ) == "number" and not unitless( $number ) {
		@return $number / ( $number * 0 + 1 );
	}
	@return $number;
}

/// Find the next key in a map.
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
/// @return {Mixed} The value for the key after `$key`, if `$key` was found.
@function map-next( $map, $key ) {

	// Store the keys of the map as a list
	$values: map-keys( $map );

	$i: 0;

	// If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map
	@if ( map-has-key( $map, $key ) ) {
		$i: index( $values, $key ) + 1;
	}

	// If the key doesn't exist, or it's the last key in the map, return null
	@if ( $i > length( $map ) or $i == 0 ) {
		@return null;
	} @else {
		@return map-get( $map, nth( $values, $i ) );
	}
}

/// Casts a map into a list.
/// @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
/// @param {Map} $map - Map to pull a value from.
/// @return {List} Depending on the flag, returns either $keys or $values or both.
@function map-to-list( $map, $keep: "both" ) {
	$keep: if( index( "keys" "values", $keep ), $keep, "both" );

	@if type-of( $map ) == "map" {
		$keys: ();
		$values: ();

		@each $key, $val in $map {
			$keys: append( $keys, $key );
			$values: append( $values, $val );
		}

		@if $keep == "keys" {
			@return $keys;
		} @else if $keep == "values" {
			@return $values;
		} @else {
			@return zip( $keys, $values );
		}
	}
	@return if( type-of( $map ) != "list", ($value,), $map );
}

/// A collection of function for advanced type checking
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/

@function is-number( $value ) {
	@return type-of( $value ) == "number";
}

@function is-time( $value ) {
	@return is-number( $value ) and index( "ms" "s", unit( $value ) ) != null;
}

@function is-angle( $value ) {
	@return is-number( $value ) and index( "deg" "rad" "grad" "turn", unit( $value ) ) != null;
}

@function is-integer( $value ) {
	@return is-number( $value ) and round( $value ) == $value;
}

@function is-percentage( $value ) {
	@return is-number( $value ) and unit( $value ) == "%";
}

/// Finds the greatest common divisor of two integers.
///
/// @param {Number} $a - First number to compare.
/// @param {Number} $b - Second number to compare.
///
/// @returns {Number} The greatest common divisor.
@function gcd( $a, $b ) {
	// From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
	@if ( $b != 0 ) {
		@return gcd( $b, $a % $b );
	} @else {
		@return abs( $a );
	}
}

/// Handles decimal exponents by trying to convert them into a fraction
/// and then use a nth-root-algorithm for parts of the calculation.
///
/// @param {Number} $base - The base number.
/// @param {Number} $exponent - The exponent.
/// @returns {Number} The product of the exponentiation.
@function pow( $base, $exponent, $prec: 16 ) {
	@if ( floor($exponent) != $exponent ) {
		$prec2 : pow( 10, $prec );
		$exponent: round( $exponent * $prec2 );
		$denominator: gcd( $exponent, $prec2 );
		@return nth-root( pow( $base, $exponent / $denominator), $prec2 / $denominator, $prec );
	}

	$value: $base;
	@if $exponent > 1 {
		@for $i from 2 through $exponent {
			$value: $value * $base;
		}
	} @else if $exponent < 1 {
		@for $i from 0 through -$exponent {
			$value: $value / $base;
		}
	}
	@return $value;
}

@function nth-root( $num, $n: 2, $prec: 12 ) {
	// From: http://rosettacode.org/wiki/Nth_root#JavaScript
	$x: 1;

	@for $i from 0 through $prec {
		$x: 1 / $n * ( ( $n - 1 ) * $x + ( $num / pow( $x, $n - 1 ) ) );
	}

	@return $x;
}

/// Calculates the height as a percentage of the width for a given ratio.
/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.
/// @return {Number} A percentage value for the height relative to the width of a responsive container.
@function ratio-to-percentage( $ratio ) {
	$w: nth( $ratio, 1 );
	$h: nth( $ratio, 3 );
	@return $h / $w * 100%;
}
